{"ast":null,"code":"import api from \"./api\";\nexport const ACTION_TYPES = {\n  CREATE: 'CREATE',\n  UPDATE: 'UPDATE',\n  DELETE: 'DELETE',\n  GET_ALL: 'GET_ALL'\n};\n\nconst formatData = data => ({ ...data,\n  id: parseInt(data.id ? data.id : 0),\n  clientId: parseInt(data.clientId ? data.clientId : 0),\n  bookingHour: new Date().toISOString().slice(0, 19)\n});\n\nexport const getQueue = () => dispatch => {\n  api.queue().getQueue().then(response => {\n    dispatch({\n      type: ACTION_TYPES.GET_ALL,\n      payload: response.data\n    });\n  }).catch(err => console.log(err));\n};\nexport const create = (data, onSuccess) => dispatch => {\n  data = formatData(data);\n  api.queue().create(data).then(res => {\n    dispatch({\n      type: ACTION_TYPES.CREATE,\n      payload: res.data\n    });\n    onSuccess();\n  }).catch(err => console.log(err));\n};\nexport const update = (id, data, onSuccess) => dispatch => {\n  data = formatData(data);\n  api.queue().update(id, data, onSuccess).then(res => {\n    dispatch({\n      type: ACTION_TYPES.UPDATE,\n      payload: {\n        id,\n        ...data\n      }\n    });\n    onSuccess();\n  }).catch(err => console.log(err));\n};\nexport const Delete = (id, onSuccess) => dispatch => {\n  api.queue().delete(id).then(res => {\n    dispatch({\n      type: ACTION_TYPES.DELETE,\n      payload: id\n    });\n    onSuccess();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["C:/Users/beryl/Music/DogBarber/Client Side/src/actions/queue.js"],"names":["api","ACTION_TYPES","CREATE","UPDATE","DELETE","GET_ALL","formatData","data","id","parseInt","clientId","bookingHour","Date","toISOString","slice","getQueue","dispatch","queue","then","response","type","payload","catch","err","console","log","create","onSuccess","res","update","Delete","delete"],"mappings":"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","sourcesContent":["import api from \"./api\";\r\n\r\nexport const ACTION_TYPES = {\r\n    CREATE: 'CREATE',\r\n    UPDATE: 'UPDATE',\r\n    DELETE: 'DELETE',\r\n    GET_ALL: 'GET_ALL'\r\n}\r\n\r\nconst formatData = data => ({\r\n    ...data,\r\n    id: parseInt(data.id ? data.id : 0),\r\n    clientId: parseInt(data.clientId ? data.clientId : 0),\r\n    bookingHour: new Date().toISOString().slice(0,19)\r\n    \r\n})\r\n\r\nexport const getQueue = () => dispatch => {\r\n    api.queue().getQueue()\r\n        .then(\r\n            response => {\r\n                dispatch({\r\n                    type: ACTION_TYPES.GET_ALL,\r\n                    payload: response.data\r\n                })\r\n\r\n            })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const create = (data, onSuccess) => dispatch => {\r\n    data = formatData(data)\r\n    api.queue().create(data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.CREATE,\r\n                payload: res.data\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const update = (id, data, onSuccess) => dispatch => {\r\n    data = formatData(data);\r\n    api.queue().update(id, data ,onSuccess)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.UPDATE,\r\n                payload: { id, ...data }\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const Delete = (id, onSuccess) => dispatch => {\r\n    api.queue().delete(id)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.DELETE,\r\n                payload: id\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err))\r\n}"]},"metadata":{},"sourceType":"module"}