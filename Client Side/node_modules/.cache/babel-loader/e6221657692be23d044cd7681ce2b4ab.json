{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\beryl\\\\Music\\\\DogBarber\\\\Client Side\\\\src\\\\components\\\\Queue.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/queue\";\nimport { Table, Grid, TableContainer, Paper, TableHead, TableRow, TableCell, TableBody, withStyles, ButtonGroup, Button, TableSortLabel, Link, Input } from \"@material-ui/core\";\nimport { useToasts } from \"react-toast-notifications\";\nimport Typography from '@material-ui/core/Typography';\nimport useForm from \"./Form\";\nimport { TextField } from \"@material-ui/core\";\nimport PutApp from \"./PutApp\";\nimport PostApp from \"./PostApp\";\nimport DeleteApp from \"./DeleteApp\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport AppDetails from \"./AppDetails\";\n\nconst styles = theme => ({\n  root: {\n    \"& .MuiTableCell-head\": {\n      fontSize: \"1.25rem\"\n    }\n  },\n  paper: {\n    margin: theme.spacing(2),\n    padding: theme.spacing(2)\n  },\n  tableCell: {\n    padding: theme.spacing(5)\n  }\n});\n\nconst Queue = ({\n  classes,\n  ...props\n}) => {\n  const [userNameToFilter, setUserNameToFilter] = useState();\n  const [dateToFilter, setDateToFilter] = useState();\n  const {\n    addToast\n  } = useToasts();\n  useEffect(() => {\n    props.getQueue();\n    setUserNameToFilter(\" \");\n    setDateToFilter(\"\");\n  }, []);\n\n  const filterByUserName = (event, value, reason) => {\n    setUserNameToFilter(value);\n  };\n\n  const filterByAppHour = (event, value, reason) => {\n    setDateToFilter(value);\n  }; //Hash map: const userNames = new Set(props.queue.map((app) => app.userName))\n\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    elevation: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    variant: \"h3\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, \" Appointment List \"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    alignContent: \"center\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    align: \"center\",\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 41\n    }\n  }, \" Client User Name\"), /*#__PURE__*/React.createElement(Autocomplete, {\n    freeSolo: true,\n    disableClearable: true,\n    options: props.queue.map(app => app.userName),\n    renderInput: params => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Filter by User Name \",\n      margin: \"normal\",\n      variant: \"outlined\",\n      InputProps: { ...params.InputProps,\n        type: 'search'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 53\n      }\n    }))),\n    onInputChange: filterByUserName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 41\n    }\n  }, \"Appointment Hour \"), /*#__PURE__*/React.createElement(Autocomplete, {\n    freeSolo: true,\n    disableClearable: true,\n    options: props.queue.map(app => app.appointmentHour),\n    renderInput: params => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Filter by date\",\n      margin: \"normal\",\n      variant: \"outlined\",\n      InputProps: { ...params.InputProps,\n        type: 'search'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 53\n      }\n    }))),\n    onInputChange: filterByAppHour,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(ButtonGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(PostApp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 45\n    }\n  }))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }\n  }, props.queue.map((record, index) => {\n    if (record.userName.includes(userNameToFilter) && record.appointmentHour.includes(dateToFilter)) return /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      hover: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.tableCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 53\n      }\n    }, record.userName), /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.tableCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      type: \"datetime-local\",\n      value: record.appointmentHour,\n      disabled: \"true\",\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(AppDetails, Object.assign({\n      record\n    }, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 53\n      }\n    })), function () {\n      if (JSON.parse(localStorage.getItem(\"CurrentClient\")).id == record.clientId) {\n        return /*#__PURE__*/React.createElement(TableCell, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(ButtonGroup, {\n          variant: \"text\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(DeleteApp, Object.assign({\n          record\n        }, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 73\n          }\n        })), /*#__PURE__*/React.createElement(PutApp, Object.assign({\n          record\n        }, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 73\n          }\n        }))));\n      }\n    }.call(this));\n  })))))));\n};\n\nconst mapStateToProps = state => ({\n  queue: state.queue.list\n});\n\nconst mapActionToProps = {\n  getQueue: actions.getQueue\n};\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(Queue));","map":{"version":3,"sources":["C:/Users/beryl/Music/DogBarber/Client Side/src/components/Queue.js"],"names":["React","useState","useEffect","connect","actions","Table","Grid","TableContainer","Paper","TableHead","TableRow","TableCell","TableBody","withStyles","ButtonGroup","Button","TableSortLabel","Link","Input","useToasts","Typography","useForm","TextField","PutApp","PostApp","DeleteApp","Autocomplete","AppDetails","styles","theme","root","fontSize","paper","margin","spacing","padding","tableCell","Queue","classes","props","userNameToFilter","setUserNameToFilter","dateToFilter","setDateToFilter","addToast","getQueue","filterByUserName","event","value","reason","filterByAppHour","queue","map","app","userName","params","InputProps","type","appointmentHour","record","index","includes","shrink","JSON","parse","localStorage","getItem","id","clientId","call","mapStateToProps","state","list","mapActionToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/queue\";\r\nimport { Table, Grid, TableContainer, Paper, TableHead, TableRow, TableCell, TableBody, withStyles, ButtonGroup, Button, TableSortLabel, Link, Input } from \"@material-ui/core\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useForm from \"./Form\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport PutApp from \"./PutApp\";\r\nimport PostApp from \"./PostApp\";\r\nimport DeleteApp from \"./DeleteApp\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport AppDetails from \"./AppDetails\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        \"& .MuiTableCell-head\": {\r\n            fontSize: \"1.25rem\"\r\n        }\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(2),\r\n        padding: theme.spacing(2)\r\n    },\r\n    tableCell: {\r\n        padding: theme.spacing(5)\r\n    }\r\n})\r\n\r\nconst Queue = ({ classes, ...props }) => {\r\n\r\n    const [userNameToFilter, setUserNameToFilter] = useState()\r\n\r\n    const [dateToFilter, setDateToFilter] = useState()\r\n\r\n    const { addToast } = useToasts()\r\n\r\n    useEffect(() => {\r\n        props.getQueue()\r\n        setUserNameToFilter(\" \")\r\n        setDateToFilter(\"\")\r\n    }, [])\r\n\r\n    const filterByUserName = (event, value, reason) => {\r\n        setUserNameToFilter(value)\r\n    }\r\n\r\n    const filterByAppHour = (event, value, reason) => {\r\n        setDateToFilter(value)\r\n    }\r\n\r\n    //Hash map: const userNames = new Set(props.queue.map((app) => app.userName))\r\n\r\n    return (\r\n        <Paper className={classes.paper} elevation={3}>\r\n            <Typography align='center' variant=\"h3\" gutterBottom> Appointment List </Typography>\r\n            <Grid container justify='center' alignItems='center' alignContent='center' align='center'>\r\n                <Grid item align='center'>\r\n                    <TableContainer align='center' className={classes.root}>\r\n                        <Table>\r\n                            <TableHead >\r\n                                <TableRow>\r\n                                    <TableCell className={classes.tableCell}>\r\n                                        <Typography variant=\"h5\" gutterBottom> Client User Name</Typography>\r\n                                        <Autocomplete\r\n                                            freeSolo\r\n                                            disableClearable\r\n                                            options={props.queue.map((app) => app.userName)}\r\n                                            renderInput={(params) => (\r\n                                                <div>\r\n                                                    <TextField\r\n                                                        {...params}\r\n                                                        label=\"Filter by User Name \"\r\n                                                        margin=\"normal\"\r\n                                                        variant=\"outlined\"\r\n                                                        InputProps={{ ...params.InputProps, type: 'search' }}\r\n                                                    />\r\n                                                </div>\r\n                                            )}\r\n                                            onInputChange={filterByUserName}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell className={classes.tableCell}>\r\n                                        <Typography variant=\"h5\" gutterBottom>Appointment Hour </Typography>\r\n                                        <Autocomplete\r\n                                            freeSolo\r\n                                            disableClearable\r\n                                            options={props.queue.map((app) => app.appointmentHour)}\r\n                                            renderInput={(params) => (\r\n                                                <div>\r\n                                                    <TextField\r\n                                                        {...params}\r\n                                                        label=\"Filter by date\"\r\n                                                        margin=\"normal\"\r\n                                                        variant=\"outlined\"\r\n                                                        InputProps={{ ...params.InputProps, type: 'search' }}\r\n                                                    />\r\n                                                </div>\r\n                                            )}\r\n                                            onInputChange={filterByAppHour}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <ButtonGroup>\r\n                                            <PostApp />\r\n                                        </ButtonGroup>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    props.queue.map((record, index) => {\r\n                                        if (record.userName.includes(userNameToFilter) && record.appointmentHour.includes(dateToFilter))\r\n                                            return (\r\n                                                <TableRow key={index} hover >\r\n                                                    <TableCell className={classes.tableCell}>\r\n                                                        {record.userName}\r\n                                                    </TableCell>\r\n                                                    <TableCell className={classes.tableCell}>\r\n                                                    <TextField\r\n                            type=\"datetime-local\"\r\n                            value={record.appointmentHour}\r\n                            disabled=\"true\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                                                       \r\n                                                    </TableCell>\r\n                                                    <AppDetails{...({ record })} />\r\n                                                    {function () {\r\n                                                        if (JSON.parse(localStorage.getItem(\"CurrentClient\")).id == record.clientId) {\r\n                                                            return (\r\n                                                                <TableCell>\r\n                                                                    <ButtonGroup variant=\"text\">\r\n                                                                        <DeleteApp {...({ record })} />\r\n                                                                        <PutApp {...({ record })} />\r\n                                                                    </ButtonGroup>\r\n                                                                </TableCell>\r\n                                                            )\r\n                                                        }\r\n                                                    }.call(this)}\r\n                                                </TableRow>)\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper >\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    queue: state.queue.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n    getQueue: actions.getQueue,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(Queue));\r\n"]},"metadata":{},"sourceType":"module"}