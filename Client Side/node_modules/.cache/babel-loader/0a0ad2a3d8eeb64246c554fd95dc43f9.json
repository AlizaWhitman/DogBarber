{"ast":null,"code":"import { ACTION_TYPES } from \"../actions/queue\";\nconst initialState = {\n  list: []\n};\nexport const queue = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.GET_ALL:\n      return { ...state,\n        list: [...action.payload]\n      };\n\n    case ACTION_TYPES.CREATE:\n      return { ...state,\n        list: [...state.list, action.payload]\n      };\n\n    case ACTION_TYPES.UPDATE:\n      return { ...state,\n        list: state.list.map(x => x.id == action.payload.id ? action.payload : x)\n      };\n\n    case ACTION_TYPES.DELETE:\n      return { ...state,\n        list: state.list.filter(x => x.id != action.payload)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/beryl/Music/DogBarber/Client Side/src/reducers/queue.js"],"names":["ACTION_TYPES","initialState","list","queue","state","action","type","GET_ALL","payload","CREATE","UPDATE","map","x","id","DELETE","filter"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;AAKA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAEnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,YAAY,CAACO,OAAlB;AAEI,aAAO,EACH,GAAGH,KADA;AAEHF,QAAAA,IAAI,EAAE,CAAC,GAAGG,MAAM,CAACG,OAAX;AAFH,OAAP;;AAKJ,SAAKR,YAAY,CAACS,MAAlB;AACI,aAAO,EACH,GAAGL,KADA;AAEHF,QAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgBG,MAAM,CAACG,OAAvB;AAFH,OAAP;;AAKJ,SAAKR,YAAY,CAACU,MAAlB;AACI,aAAO,EACH,GAAGN,KADA;AAEHF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWS,GAAX,CAAeC,CAAC,IAAEA,CAAC,CAACC,EAAF,IAAQR,MAAM,CAACG,OAAP,CAAeK,EAAvB,GAA2BR,MAAM,CAACG,OAAlC,GAA2CI,CAA7D;AAFH,OAAP;;AAKJ,SAAKZ,YAAY,CAACc,MAAlB;AACI,aAAO,EACH,GAAGV,KADA;AAEHF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWa,MAAX,CAAkBH,CAAC,IAAEA,CAAC,CAACC,EAAF,IAAMR,MAAM,CAACG,OAAlC;AAFH,OAAP;;AAIJ;AACI,aAAOJ,KAAP;AA1BR;AA4BH,CA9BM","sourcesContent":["import { ACTION_TYPES } from \"../actions/queue\";\r\n\r\nconst initialState = {\r\n    list: []\r\n\r\n}\r\n\r\nexport const queue = (state = initialState, action) => {\r\n    \r\n    switch (action.type) {\r\n        case ACTION_TYPES.GET_ALL:\r\n\r\n            return {\r\n                ...state,\r\n                list: [...action.payload]\r\n            }\r\n\r\n        case ACTION_TYPES.CREATE:\r\n            return {\r\n                ...state,\r\n                list: [...state.list, action.payload]\r\n            }\r\n\r\n        case ACTION_TYPES.UPDATE:\r\n            return {\r\n                ...state,\r\n                list: state.list.map(x=>x.id == action.payload.id? action.payload: x)\r\n            }\r\n            \r\n        case ACTION_TYPES.DELETE:\r\n            return {\r\n                ...state,\r\n                list: state.list.filter(x=>x.id!=action.payload)\r\n            }\r\n        default:\r\n            return state\r\n        }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}